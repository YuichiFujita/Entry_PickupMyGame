//======================================================================================================================
//
//	弾ヘッダー [bullet.h]
//	Author：藤田勇一
//
//======================================================================================================================
#ifndef _BULLET_H_			// このマクロ定義がされていない場合
#define _BULLET_H_			// 二重インクルード防止のマクロを定義する

//**********************************************************************************************************************
//	インクルードファイル
//**********************************************************************************************************************
#include "main.h"

//**********************************************************************************************************************
//	マクロ定義
//**********************************************************************************************************************
#define MAX_BULLET	(128)	// 使用するポリゴン数 (弾の最大数)

#define BULL_WIDTH	(12.0f)	// 弾の横幅 / 2
#define BULL_HEIGHT	(12.0f)	// 弾の縦幅 / 2
#define BULL_DEPTH	(12.0f)	// 弾の奥行 / 2

#define LIFE_BULLET	(80)	// 弾の寿命

//**********************************************************************************************************************
//	列挙型定義 (BULLETTYPE)
//**********************************************************************************************************************
typedef enum
{
	BULLETTYPE_PLAYER = 0,	// プレイヤーの弾
	BULLETTYPE_ENEMY,		// 敵の弾
	BULLETTYPE_MAX			// この列挙型の総数
} BULLETTYPE;

//**********************************************************************************************************************
//	構造体定義 (Bullet)
//**********************************************************************************************************************
typedef struct
{
	D3DXVECTOR3 pos;		// 現在の位置
	D3DXVECTOR3 oldPos;		// 前回の位置
	D3DXVECTOR3 move;		// 移動量
	D3DXMATRIX  mtxWorld;	// ワールドマトリックス
	BULLETTYPE  type;		// 種類
	int         nLife;		// 寿命
	int         nShadowID;	// 影のインデックス
	bool        bUse;		// 使用状況
}Bullet;

//**********************************************************************************************************************
//	プロトタイプ宣言
//**********************************************************************************************************************
void InitBullet(void);		// 弾の初期化処理
void UninitBullet(void);	// 弾の終了処理
void UpdateBullet(void);	// 弾の更新処理
void DrawBullet(void);		// 弾の描画処理
void SetBullet(D3DXVECTOR3 pos, D3DXVECTOR3 move, BULLETTYPE type, bool bSound);	// 弾の設定処理
Bullet *GetBullet(void);	// 弾の取得処理

//**********************************************************************************************************************
//	プロトタイプ宣言 (デバッグ用)
//**********************************************************************************************************************
int GetNumBullet(void);		// 弾の総数取得処理

#endif