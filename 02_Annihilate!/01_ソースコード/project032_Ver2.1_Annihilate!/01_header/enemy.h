//======================================================================================================================
//
//	敵ヘッダー [enemy.h]
//	Author：藤田勇一
//
//======================================================================================================================
#ifndef _ENEMY_H_					// このマクロ定義がされていない場合
#define _ENEMY_H_					// 二重インクルード防止のマクロを定義する

//**********************************************************************************************************************
//	マクロ定義
//**********************************************************************************************************************
#define MAX_ENEMY		(128)		// 使用するモデル数 (敵の最大数)
#define SPAWN_MIN_SPEED	(1)			// 出現時の最高スピード
#define SPAWN_MAX_SPEED	(4)			// 出現時の最低スピード

//**********************************************************************************************************************
//	列挙型定義 (DAMAGETYPE)
//**********************************************************************************************************************
typedef enum
{
	DAMAGETYPE_SLASH = 0,			// 斬撃
	DAMAGETYPE_BULLET,				// 弾
	DAMAGETYPE_KICK,				// キック
	DAMAGETYPE_MAX,					// この列挙型の総数
} DAMAGETYPE;

//**********************************************************************************************************************
//	構造体定義 (Enemy)
//**********************************************************************************************************************
typedef struct
{
	D3DXVECTOR3 pos;				// 現在の位置
	D3DXVECTOR3 oldPos;				// 前回の位置
	D3DXVECTOR3 rot;				// 向き
	D3DXMATRIX  mtxWorld;			// ワールドマトリックス
	Model      *pModelData;			// モデル情報
	ACTIONSTATE state;				// 状態
	int         nLife;				// 体力
	int         nType;				// 種類
	int         nCounterState;		// 状態管理カウンター
	int         nCounterAttack;		// 攻撃管理カウンター
	int         nCounterWeed;		// 雑草管理カウンター
	int         nShadowID;			// 影のインデックス
	int         nSlashID;			// 斬撃のインデックス
	int         nOrbitID;			// 軌跡のインデックス
	bool        bUse;				// 使用状況
}Enemy;

//**********************************************************************************************************************
//	プロトタイプ宣言
//**********************************************************************************************************************
void InitEnemy(void);										// 敵の初期化処理
void UninitEnemy(void);										// 敵の終了処理
void UpdateEnemy(void);										// 敵の更新処理
void DrawEnemy(void);										// 敵の描画処理
void SetEnemy(D3DXVECTOR3 pos, D3DXVECTOR3 rot, int nType);	// 敵の設定処理
bool HitEnemy(Enemy *pEnemy, int nDamage, DAMAGETYPE type);	// 敵のダメージ判定
int  GetKillEnemy(void);									// 敵の討伐数の取得処理
Enemy *GetEnemy(void);										// 敵の取得処理

//**********************************************************************************************************************
//	プロトタイプ宣言 (デバッグ用)
//**********************************************************************************************************************
int GetNumEnemy(void);				// 敵の総数取得処理

#endif