//======================================================================================================================
//
//	プレイヤーヘッダー [player.h]
//	Author：藤田勇一
//
//======================================================================================================================
#ifndef _PLAYER_H_					// このマクロ定義がされていない場合
#define _PLAYER_H_					// 二重インクルード防止のマクロを定義する

//**********************************************************************************************************************
//	マクロ定義
//**********************************************************************************************************************
#define TEXTURE_PLAYER_MAX	(10)	// テクスチャの最大数
#define NONE_PLAYER_PARENT	(-1)	// プレイヤーの親の初期値 (親がいない場合)

#define MAX_PARTS			(15)	// パーツの最大数
#define MAX_MOTION			(6)		// モーションの最大数
#define MAX_KEY				(8)		// キーの最大数

#define PLAY_WIDTH			(16.0f)	// プレイヤーの横幅 / 2
#define PLAY_HEIGHT			(55.0f)	// プレイヤーの縦幅
#define PLAY_DEPTH			(16.0f)	// プレイヤーの奥行 / 2

#define PLAY_LIFE			(100)	// プレイヤーの体力

#define DAMAGE_TIME_PLAY	(30)					// ダメージ状態を保つ時間
#define UNR_TIME_PLAY		(DAMAGE_TIME_PLAY - 10)	// 無敵状態に変更する時間

#define PLAY_SLASH_LIFE		(20)	// プレイヤーの斬撃の寿命
#define PLAY_MOVE_BULLET	(4.0f)	// プレイヤーの弾の移動量

//**********************************************************************************************************************
//	列挙型定義 (MODEL_PLAYER)
//**********************************************************************************************************************
typedef enum
{
	MODEL_PLAYER_BODY = 0,			// 体
	MODEL_PLAYER_HEAD,				// 頭
	MODEL_PLAYER_SLEEVE_L,			// 左腕
	MODEL_PLAYER_SLEEVE_R,			// 右腕
	MODEL_PLAYER_WRIST_L,			// 左手首
	MODEL_PLAYER_WRIST_R,			// 右手首
	MODEL_PLAYER_HAND_L,			// 左手
	MODEL_PLAYER_HAND_R,			// 右手
	MODEL_PLAYER_PANTS_L,			// 左足
	MODEL_PLAYER_PANTS_R,			// 右足
	MODEL_PLAYER_LEG_L,				// 左腿
	MODEL_PLAYER_LEG_R,				// 右腿
	MODEL_PLAYER_SHOES_L,			// 左靴
	MODEL_PLAYER_SHOES_R,			// 右靴
	MODEL_PLAYER_KNIFE,				// 武器 (ナイフ)
	MODEL_PLAYER_GUN,				// 武器 (銃)
	MODEL_PLAYER_MAX,				// この列挙型の総数
} MODEL_PLAYER;

//**********************************************************************************************************************
//	列挙型定義 (MOTIONTYPE)
//**********************************************************************************************************************
typedef enum
{
	MOTIONTYPE_NONE = 0,			// 待機状態
	MOTIONTYPE_MOVE,				// 移動状態
	MOTIONTYPE_ATTACK,				// 攻撃状態
	MOTIONTYPE_JUMP,				// ジャンプ状態
	MOTIONTYPE_LANDING,				// 着地状態
	MOTIONTYPE_MAX,					// この列挙型の総数
} MOTIONTYPE;

//**********************************************************************************************************************
//	構造体定義 (Key)
//**********************************************************************************************************************
typedef struct
{
	int nFrame;						// キー再生フレーム数
	D3DXVECTOR3 aPos[MAX_PARTS];	// モデル (パーツ) の位置
	D3DXVECTOR3 aRot[MAX_PARTS];	// モデル (パーツ) の向き
}Key;

//**********************************************************************************************************************
//	構造体定義 (KeyInfo)
//**********************************************************************************************************************
typedef struct
{
	bool bLoop;						// ループ ON / OFF
	int  nNumKey;					// キー数
	Key  aKey[MAX_KEY];				// キーの情報
}KeyInfo;

//**********************************************************************************************************************
//	構造体定義 (MotionInfo)
//**********************************************************************************************************************
typedef struct
{
	KeyInfo    aMotion[MAX_MOTION];	// モーションの情報
	MOTIONTYPE type;				// モーションの状態
	int        nPose;				// モーションのポーズ番号
	int        nCounter;			// モーションのカウンター
}MotionInfo;

//**********************************************************************************************************************
//	構造体定義 (PlayerParts)
//**********************************************************************************************************************
typedef struct
{
	D3DXVECTOR3 initPos;			// 初期の位置
	D3DXVECTOR3 pos;				// 現在の位置
	D3DXVECTOR3 initRot;			// 初期の向き
	D3DXVECTOR3 rot;				// 現在の向き
	D3DXMATRIX  mtxWorld;			// ワールドマトリックス
	Model      *pModelData;			// モデル情報
	int         nParentID;			// プレイヤーの親のインデックス
}PlayerParts;

//**********************************************************************************************************************
//	構造体定義 (Player)
//**********************************************************************************************************************
typedef struct
{
	D3DXVECTOR3 pos;				// 現在の位置
	D3DXVECTOR3 oldPos;				// 前回の位置
	D3DXVECTOR3 move;				// 移動量
	D3DXVECTOR3 rot;				// 現在の向き
	D3DXVECTOR3 destRot;			// 目標の向き
	D3DXMATRIX  mtxWorld;			// ワールドマトリックス
	ACTIONSTATE state;				// プレイヤーの状態
	MotionInfo  motion;				// モーション情報
	PlayerParts aParts[MAX_PARTS];	// パーツ情報
	int         nLife;				// 体力
	int         nCounterState;		// 状態管理カウンター
	int         nShadowID;			// 影のインデックス
	int         nSlashID;			// 斬撃のインデックス
	int         nTornadoID;			// 竜巻のインデックス
	bool        bJump;				// ジャンプ状況
	bool        bKick;				// キック状況
	bool        bUse;				// 使用状況
}Player;

//**********************************************************************************************************************
//	プロトタイプ宣言
//**********************************************************************************************************************
void InitPlayer(void);				// プレイヤーの初期化処理
void UninitPlayer(void);			// プレイヤーの終了処理
void UpdatePlayer(void);			// プレイヤーの更新処理
void DrawPlayer(void);				// プレイヤーの描画処理
void SetPositionPlayer(D3DXVECTOR3 pos, D3DXVECTOR3 rot);	// プレイヤーの位置・向きの設定処理
void HealPlayer(Player *pPlayer, int nHeal);				// プレイヤーの回復判定
void HitPlayer(Player *pPlayer, int nDamage);				// プレイヤーのダメージ判定
Player *GetPlayer(void);									// プレイヤーの取得処理

//**********************************************************************************************************************
//	プロトタイプ宣言 (デバッグ用)
//**********************************************************************************************************************
D3DXVECTOR3 GetPlayerPos(void);		// プレイヤーの座標の取得処理
D3DXVECTOR3 GetPlayerRot(void);		// プレイヤーの向きの取得処理
void ResetPlayer(void);				// プレイヤーの再設定処理

#endif